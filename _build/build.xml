<?xml version="1.0"?>
<project name="MODxCore" basedir=".">
    <!-- Override properties in the build.properties file -->
    <property file="build.properties" />

    <!-- Set some common project properties -->
    <property name="project.name" value="modx" />
    <property name="project.basedir" value=".." />
    <property name="project.core.dir" value="${project.basedir}/core" />
    <property name="project.assets.dir" value="${project.basedir}/assets" />
    <property name="project.connectors.dir" value="${project.basedir}/connectors" />
    <property name="project.manager.dir" value="${project.basedir}/manager" />
    <property name="project.modext.dir" value="${project.manager.dir}/assets/modext" />
    <property name="project.css.dir" value="${project.manager.dir}/templates/default/css" />

    <!-- Set the project version -->
    <property name="modx.core.version" value="2.0.0" />
    <property name="modx.core.release" value="rc" />

    <!-- Set some common build properties -->
    <property name="build.dir" value="${basedir}" />
    <property name="build.src.url"
              value="http://svn.modxcms.com/svn/tattoo/tattoo/branches/revolution"
    />
    <property name="build.image.basedir" value="${basedir}/image" />
    <property name="build.image.dir" value="${basedir}/image/modx-${modx.core.version}-${modx.core.release}" />
    <property name="build.image.modext.dir" value="${build.image.basedir}/modext" />
    <property name="build.image.css.dir" value="${build.image.basedir}/css" />
    <property name="build.distrib.dir" value="${basedir}/distrib" />
    <property name="build.apidocs.dir" value="${project.basedir}/docs" />

    <!-- Set a path representing all the root path elements for the build source -->
    <path id="project.srcpath">
        <pathelement location="${project.core.dir}" />
        <pathelement location="${project.assets.dir}" />
        <pathelement location="${project.connectors.dir}" />
        <pathelement location="${project.manager.dir}" />
        <pathelement location="${project.basedir}/index.php" />
        <pathelement location="${project.basedir}/ht.access" />
    </path>

    <!-- Set the project classpath and define the svn task -->
    <path id="project.classpath">
        <fileset dir="${basedir}/lib">
            <include name="**/*.jar" />
        </fileset>
    </path>
    <taskdef name="svn" classname="org.tigris.subversion.svnant.SvnTask" classpathref="project.classpath" />
    <taskdef name="yuicompress" classname="com.yahoo.platform.yui.compressor.YUICompressTask" classpathref="project.classpath" />

    <!-- ================================= 
          target: complete              
         ================================= -->
    <target name="complete" description="--> Complete Build">
        <antcall target="svn-export-build-image"></antcall>
        <antcall target="modext-minify"></antcall>
        <antcall target="modext-concat-min"></antcall>
        <antcall target="modext-concat"></antcall>
        <antcall target="copy-prepared-js"></antcall>
        <antcall target="css-minify"></antcall>
        <antcall target="css-concat-min"></antcall>
        <antcall target="copy-prepared-css"></antcall>
        <antcall target="generate-core-transport"></antcall>
        <antcall target="prepare-build-image"></antcall>
        <antcall target="copy-core-transport"></antcall>
        <!--<antcall target="generate-phpdocs"></antcall>-->
        
        <buildnumber />
        
        <!--<antcall target="build-sdk"></antcall>-->
        <antcall target="build-traditional"></antcall>
        <antcall target="build-advanced"></antcall>
    </target>

    <target name="complete-wc" description="--> Complete Working Copy Build">
        <antcall target="modext-minify-wc"></antcall>
        <antcall target="modext-concat-min"></antcall>
        <antcall target="modext-concat-wc"></antcall>
        <antcall target="copy-prepared-js-wc"></antcall>
        <antcall target="generate-core-transport"></antcall>
    </target>

    <!-- Various cleanup targets -->
    <target name="cleanup-build-image" description="empty the build image directory">
        <delete dir="${build.image.dir}" />
    </target>
    <target name="cleanup-build-modext-image" description="empty the MODExt build image directory">
        <delete dir="${build.image.modext.dir}" />
    </target>
    <target name="cleanup-build-css-image" description="empty the MODExt build image directory">
        <delete dir="${build.image.css.dir}" />
    </target>
    <target name="cleanup-build-distrib" description="empty the build distrib directory">
        <delete dir="${build.distrib.dir}" />
    </target>
    <target name="cleanup-build-apidocs" description="empty the build apidocs directory">
        <delete dir="${build.apidocs.dir}" />
    </target>

    <!-- Export the svn build image from the repository -->
    <target name="svn-export-build-image"
            depends="cleanup-build-image"
            description="export a revision of the MODx core from SVN"
    >
        <svn>
            <export srcUrl="${build.src.url}"
                    destPath="${build.image.dir}"
                    revision="HEAD"
                    force="true"
            />
        </svn>
    </target>

    <!-- Export the svn build image from a local working copy -->
    <target name="svn-export-build-image-wc"
            depends="cleanup-build-image"
            description="export a revision of the MODx core from an SVN working copy"
    >
        <svn>
            <export srcPath="${project.basedir}"
                    destPath="${build.image.dir}"
                    force="true"
            />
        </svn>
    </target>

    <!-- Minify the MODExt JavaScript libraries (using YUIAnt task) -->
    <target name="modext-minify" depends="cleanup-build-modext-image" description="Create minimized MODExt scripts from the working copy">
        <echo>Creating minimized js scripts from your working copy</echo>

        <yuicompress warn="false" munge="yes" preserveallsemicolons="true" outputsuffix="-min" 
            outputfolder="${build.image.modext.dir}/build" >
            <fileset dir="${project.manager.dir}/assets/modext"
                includes="**/*.js" 
                excludes="build/**,util/filetree/**,modext-min.js,modext.js"
            />
        </yuicompress>
    </target>
    
    <target name="css-minify" depends="cleanup-build-css-image" description="Create minimized CSS from the working copy">
        <echo>Creating minimized js scripts from your working copy</echo>

        <yuicompress warn="false" munge="no" preserveallsemicolons="true" outputsuffix="-min" 
            outputfolder="${build.image.css.dir}">
            <fileset dir="${project.manager.dir}/templates/default/css"
                includes="ie.css,index.css,login.css,xtheme-modx.css"
            />
        </yuicompress>
    </target>

    <!-- Minify the MODExt JavaScript libraries (using YUIAnt task) -->
    <target name="modext-minify-wc" depends="cleanup-build-modext-image" description="Create minimized MODExt scripts in the working copy">
        <echo>Creating minimized js scripts in your working copy</echo>

        <yuicompress warn="false" munge="no" preserveallsemicolons="true" outputsuffix="-min" 
            outputfolder="${build.image.modext.dir}/build" >
            <fileset dir="${project.manager.dir}/assets/modext"
                includes="**/*.js" 
                excludes="build/**,util/filetree/**,modext-min.js,modext.js"
            />
        </yuicompress>
    </target>
    
    <target name="css-minify-wc" depends="cleanup-build-css-image" description="Create minimized CSS from the working copy">
        <echo>Creating minimized js scripts from your working copy</echo>

        <yuicompress warn="false" munge="no" preserveallsemicolons="true" outputsuffix="-min" 
            outputfolder="${build.image.css.dir}">
            <fileset dir="${project.manager.dir}/templates/default/css"
                includes="ie.css,index.css,login.css,xtheme-modx.css"
            />
        </yuicompress>
    </target>

    <!-- Concat the minified MODExt JavaScript libraries -->
    <target name="modext-concat-min" description="Create modext-min.js">
        <echo>Creating modext-min.js in ${build.image.modext.dir}</echo>
        
        <concat destfile="${build.image.modext.dir}/modext-min.js">
            <header filtering="no" trimleading="yes">/**
MODExt Revolution 1.0
Copyright (c) 2007-2010, Shaun McCormick
All rights reserved
MODx-specific JS extension for ExtJS 3.0

-------------

The MODExt JS extension is distributed under the terms of the GNU GPLv3 license.
It extends ExtJS, distributed under the Open Source GPL 3.0 license.

http://www.gnu.org/licenses/gpl.html

-------------

This library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
General Public License for more details.
*/
            </header>
            
            <filelist dir="${build.image.modext.dir}/build/core" 
                      files="modx.localization-min.js" />
            <filelist dir="${build.image.modext.dir}/build/util" 
                      files="utilities-min.js" />
            <filelist dir="${build.image.modext.dir}/build/core" 
                      files="modx.component-min.js" />
            <filelist dir="${build.image.modext.dir}/build/widgets/core" 
                      files="modx.panel-min.js,modx.tabs-min.js,modx.window-min.js,modx.tree-min.js,modx.combo-min.js,modx.grid-min.js,modx.console-min.js,modx.portal-min.js" />
            <filelist dir="${build.image.modext.dir}/build/widgets" 
                      files="modx.treedrop-min.js,windows-min.js" />
            <filelist dir="${build.image.modext.dir}/build/widgets/resource" 
                      files="modx.tree.resource-min.js" />
            <filelist dir="${build.image.modext.dir}/build/widgets/element" 
                      files="modx.tree.element-min.js" />
            <filelist dir="${build.image.modext.dir}/build/widgets/system" 
                      files="modx.tree.directory-min.js" />
            <filelist dir="${build.image.modext.dir}/build/core" 
                      files="modx.view-min.js" />
        </concat>
    </target>
    
    <!-- Concat the non-minified MODExt JavaScript libraries -->
    <target name="modext-concat" description="Create modext.js">
        <echo>Creating modext.js in ${build.image.modext.dir}</echo>
        
        <concat destfile="${build.image.modext.dir}/modext.js">
            <header filtering="no" trimleading="yes">/**
MODExt Revolution 1.0
Copyright (c) 2007-2010, Shaun McCormick
All rights reserved
MODx-specific JS extension for ExtJS 3.0

-------------

The MODExt JS extension is distributed under the terms of the GNU GPLv3 license.
It extends ExtJS, distributed under the Open Source GPL 3.0 license.

http://www.gnu.org/licenses/gpl.html

-------------

This library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
General Public License for more details.
*/
            </header>
            <filelist dir="${project.modext.dir}/core" 
                      files="modx.localization.js" />
            <filelist dir="${project.modext.dir}/util" 
                      files="utilities.js" />
            <filelist dir="${project.modext.dir}/core" 
                      files="modx.component.js" />
            <filelist dir="${project.modext.dir}/widgets/core" 
                      files="modx.panel.js,modx.tabs.js,modx.window.js,modx.tree.js,modx.combo.js,modx.grid.js,modx.console.js,modx.portal.js" />
            <filelist dir="${project.modext.dir}/widgets" 
                      files="modx.treedrop.js,windows.js" />
            <filelist dir="${project.modext.dir}/widgets/resource" 
                      files="modx.tree.resource.js" />
            <filelist dir="${project.modext.dir}/widgets/element" 
                      files="modx.tree.element.js" />
            <filelist dir="${project.modext.dir}/widgets/system" 
                      files="modx.tree.directory.js" />
            <filelist dir="${project.modext.dir}/core" 
                      files="modx.view.js" />
        </concat>
    </target>

    <!-- Concat the non-minified MODExt JavaScript libraries -->
    <target name="modext-concat-wc" description="Create modext.js">
        <echo>Creating modext.js in ${build.image.modext.dir}</echo>
                
        <concat destfile="${build.image.modext.dir}/modext.js">
            <header filtering="no" trimleading="yes">/**
MODExt Revolution 1.0
Copyright (c) 2007-2010, Shaun McCormick
All rights reserved
MODx-specific JS extension for ExtJS 3.0

-------------

The MODExt JS extension is distributed under the terms of the GNU GPLv3 license.
It extends ExtJS, distributed under the Open Source GPL 3.0 license.

http://www.gnu.org/licenses/gpl.html

-------------

This library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
General Public License for more details.
*/
            </header>
            <filelist dir="${project.modext.dir}/core" 
                      files="modx.localization.js" />
            <filelist dir="${project.modext.dir}/util" 
                      files="utilities.js" />
            <filelist dir="${project.modext.dir}/core" 
                      files="modx.component.js" />
            <filelist dir="${project.modext.dir}/widgets/core" 
                      files="modx.panel.js,modx.tabs.js,modx.window.js,modx.tree.js,modx.combo.js,modx.grid.js,modx.console.js,modx.portal.js" />
            <filelist dir="${project.modext.dir}/widgets" 
                      files="modx.treedrop.js,windows.js" />
            <filelist dir="${project.modext.dir}/widgets/resource" 
                      files="modx.tree.resource.js" />
            <filelist dir="${project.modext.dir}/widgets/element" 
                      files="modx.tree.element.js" />
            <filelist dir="${project.modext.dir}/widgets/system" 
                      files="modx.tree.directory.js" />
            <filelist dir="${project.modext.dir}/core" 
                      files="modx.view.js" />
        </concat>
    </target>
    
    
    <!-- Concat the minified CSS -->
    <target name="css-concat-min" description="Create modx-min.css">
        <echo>Creating modx-min.css in ${build.image.css.dir}</echo>
        
        <concat destfile="${build.image.css.dir}/modx-min.css">
            <header filtering="no" trimleading="yes"></header>
            
            <filelist dir="${build.image.css.dir}" 
                      files="xtheme-modx-min.css,index-min.css" />
        </concat>
    </target>
    
    <!-- Concat the minified CSS -->
    <target name="css-concat-min-wc" description="Create modx-min.css">
        <echo>Creating modx-min.css in ${build.image.css.dir}</echo>
        
        <concat destfile="${build.image.css.dir}/modx-min.css">
            <header filtering="no" trimleading="yes"></header>
            
            <filelist dir="${build.image.css.dir}" 
                      files="index-min.css,xtheme-modx-min.css" />
        </concat>
    </target>

    <!-- Copy the minified and concatenated MODExt files to the working copy -->
    <target name="copy-prepared-js" description="copy the minified and concatenated js files to the image">
        <copy todir="${build.image.dir}/manager/assets/modext">
            <fileset dir="${build.image.modext.dir}" />
        </copy>
    </target>

    <!-- Copy the minified and concatenated MODExt files to the working copy -->
    <target name="copy-prepared-js-wc" description="copy the minified and concatenated js files to the working copy">
        <delete file="${project.modext.dir}/modext-min.js" />
        <delete file="${project.modext.dir}/modext.js" />
        <delete dir="${project.modext.dir}/build" />
        <copy todir="${project.modext.dir}">
            <fileset dir="${build.image.modext.dir}" />
        </copy>
        <copy file="${build.image.modext.dir}/modext-min.js" todir="${project.modext.dir}" />
        <copy file="${build.image.modext.dir}/modext.js" todir="${project.modext.dir}" />
    </target>
    
    <!-- copy prepared css -->
    <target name="copy-prepared-css" description="copy the minified and concatenated js files to the image">
        <copy todir="${build.image.dir}/manager/templates/default/css">
            <fileset dir="${build.image.css.dir}" />
        </copy>
    </target>
        
    <!-- Copy minified css to working copy -->
    <target name="copy-prepared-css-wc" description="copy the minified css files to the working copy">
        <delete file="${project.css.dir}ie-min.css" />
        <delete file="${project.css.dir}login-min.css" />
        <delete file="${project.css.dir}modx-min.css" />
        <copy file="${build.image.css.dir}/ie-min.css" todir="${project.css.dir}" />
        <copy file="${build.image.css.dir}/login-min.css" todir="${project.css.dir}" />
        <copy file="${build.image.css.dir}/modx-min.css" todir="${project.css.dir}" />
    </target>

    <!-- Run the core data generation script -->
    <target name="generate-core-data"
            description="generate core data for MODx from a reference database"
    >
        <exec dir="${basedir}" executable="${php.command}">
            <arg line="${basedir}/transport.data.php" />
        </exec>
    </target>

    <!-- Run the core package generation script in your local working copy -->
    <target name="generate-core-transport" description="generate the core transport package in your working copy">
        <delete file="${project.core.dir}/packages/core.transport.zip" />
        <delete dir="${project.core.dir}/packages/core" />
        <exec dir="${basedir}" executable="${php.command}">
            <arg line="${basedir}/transport.core.php" />
        </exec>
    </target>

    <!-- Run the phpdoc generation script -->
    <target name="generate-phpdocs"
            depends="cleanup-build-apidocs"
            description="generate the phpdoc documentation"
    >
        <exec dir="${project.basedir}" executable="${phpdoc.command}">
            <arg line="-c ${basedir}/phpdoc.ini" />
        </exec>
    </target>

    <!-- Copy the core transport package from a working copy to an exported image -->
    <target name="copy-core-transport" description="copy the core transport to the image">
        <delete file="${build.image.dir}/core/packages/core.transport.zip" />
        <delete dir="${build.image.dir}/core/packages/core" />
        <copy file="${project.core.dir}/packages/core.transport.zip"
              todir="${build.image.dir}/core/packages"
        />
    </target>

    <!-- Prepare the build image for making a distrib -->
    <target name="prepare-build-image" description="prepare the build image for packaging">
        <mkdir dir="${build.distrib.dir}" />
    </target>

    <!-- Build a MODx SDK distrib with all files in place and extracted -->
    <target name="build-sdk" description="create the traditional distribution package">
        <replace file="${build.image.dir}/setup/includes/config.core.php" token="@svn" value="@sdk" />
        <delete dir="${build.image.dir}/core/packages/core" />
        <unzip src="${build.image.dir}/core/packages/core.transport.zip" dest="${build.image.dir}/core/packages/" />
        <copy todir="${build.image.dir}/docs">
            <fileset dir="${build.apidocs.dir}" />
        </copy>
        <copy file="${build.dir}/config.core.php.txt" tofile="${build.image.dir}/config.core.php">
            <filterset>
                <filter token="core-path" value="dirname(__FILE__) . '/core/'" />
            </filterset>
        </copy>
        <copy file="${build.dir}/config.core.php.txt" tofile="${build.image.dir}/manager/config.core.php">
            <filterset>
                <filter token="core-path" value="dirname(dirname(__FILE__)) . '/core/'" />
            </filterset>
        </copy>
        <copy file="${build.dir}/config.core.php.txt" tofile="${build.image.dir}/connectors/config.core.php">
            <filterset>
                <filter token="core-path" value="dirname(dirname(__FILE__)) . '/core/'" />
            </filterset>
        </copy>
        <zip destfile="${build.distrib.dir}/${project.name}-${modx.core.version}-${modx.core.release}-${build.number}-sdk.zip">
            <fileset dir="${build.image.dir}" />
        </zip>
        <replace file="${build.image.dir}/setup/includes/config.core.php" token="@sdk" value="@svn" />
        <delete file="${build.image.dir}/config.core.php" />
        <delete file="${build.image.dir}/manager/config.core.php" />
        <delete file="${build.image.dir}/connectors/config.core.php" />
        <delete dir="${build.image.dir}/docs" />
    </target>

    <!-- Build a traditional MODx distrib with all files in place and extracted -->
    <target name="build-traditional" description="create the traditional distribution package">
        <replace file="${build.image.dir}/setup/includes/config.core.php" token="@svn" value="@traditional" />
        <delete dir="${build.image.dir}/core/packages/core" />
        <unzip src="${build.image.dir}/core/packages/core.transport.zip" dest="${build.image.dir}/core/packages/">
            <patternset>
                <include name="core/manifest.php" />
                <include name="core/*/*.vehicle" />
                <include name="core/*/*.resolver" />
                <include name="core/*/*.validator" />
            </patternset>
        </unzip>
        <copy file="${build.dir}/config.core.php.txt" tofile="${build.image.dir}/config.core.php">
            <filterset>
                <filter token="core-path" value="dirname(__FILE__) . '/core/'" />
            </filterset>
        </copy>
        <copy file="${build.dir}/config.core.php.txt" tofile="${build.image.dir}/manager/config.core.php">
            <filterset>
                <filter token="core-path" value="dirname(dirname(__FILE__)) . '/core/'" />
            </filterset>
        </copy>
        <copy file="${build.dir}/config.core.php.txt" tofile="${build.image.dir}/connectors/config.core.php">
            <filterset>
                <filter token="core-path" value="dirname(dirname(__FILE__)) . '/core/'" />
            </filterset>
        </copy>
        <zip destfile="${build.distrib.dir}/${project.name}-${modx.core.version}-${modx.core.release}-${build.number}.zip">
            <fileset dir="${build.image.dir}">
                <exclude name="_build/**" />
            </fileset>
        </zip>
        <replace file="${build.image.dir}/setup/includes/config.core.php" token="@traditional" value="@svn" />
        <delete file="${build.image.dir}/config.core.php" />
        <delete file="${build.image.dir}/manager/config.core.php" />
        <delete file="${build.image.dir}/connectors/config.core.php" />
    </target>

    <!-- Build a new advanced MODx distrib with only the core/ and setup/ dirs 
        and the core transport package included -->
    <target name="build-advanced" description="create the advanced distribution package">
        <replace file="${build.image.dir}/setup/includes/config.core.php" token="@svn" value="@advanced" />
        <zip destfile="${build.distrib.dir}/${project.name}-${modx.core.version}-${modx.core.release}-${build.number}-advanced.zip">
            <fileset dir="${build.image.dir}">
                <include name="core/**" />
                <exclude name="core/packages/core/**" />
                <include name="setup/**" />
            </fileset>
        </zip>
        <replace file="${build.image.dir}/setup/includes/config.core.php" token="@advanced" value="@svn" />
    </target>

    <!-- Publish a distrib to a server -->
    <target name="publish-build" description="publish the build to a server for download">
        
    </target>
</project>