<?xml version="1.0"?>
<project name="MODxCore" basedir=".">
    <!-- Override properties in the build.properties file -->
    <property file="build.properties" />

    <!-- Set some common project properties -->
    <property name="project.name" value="modx" />
    <property name="project.basedir" value=".." />
    <property name="project.core.dir" value="${project.basedir}/core" />
    <property name="project.assets.dir" value="${project.basedir}/assets" />
    <property name="project.connectors.dir" value="${project.basedir}/connectors" />
    <property name="project.manager.dir" value="${project.basedir}/manager" />

    <!-- Set the project version -->
    <property name="modx.core.version" value="2.0.0" />
    <property name="modx.core.release" value="alpha" />

    <!-- Set some common build properties -->
    <property name="build.dir" value="${basedir}" />
    <property name="build.src.url"
              value="http://svn.modxcms.com/svn/tattoo/tattoo/branches/revolution"
    />
    <property name="build.image.basedir" value="${basedir}/image" />
    <property name="build.image.dir" value="${basedir}/image/modx-${modx.core.version}-${modx.core.release}" />
    <property name="build.distrib.dir" value="${basedir}/distrib" />
    <property name="build.apidocs.dir" value="${project.basedir}/docs" />

    <!-- Set a path representing all the root path elements for the build source -->
    <path id="project.srcpath">
        <pathelement location="${project.core.dir}" />
        <pathelement location="${project.assets.dir}" />
        <pathelement location="${project.connectors.dir}" />
        <pathelement location="${project.manager.dir}" />
        <pathelement location="${project.basedir}/index.php" />
        <pathelement location="${project.basedir}/ht.access" />
    </path>
    
    <!-- Set the project classpath and define the svn task -->
    <path id="project.classpath">
        <fileset dir="${basedir}/lib">
            <include name="**/*.jar" />
        </fileset>
    </path>
    <taskdef name="svn" classname="org.tigris.subversion.svnant.SvnTask" classpathref="project.classpath" />
    
    <!-- ================================= 
          target: complete              
         ================================= -->
    <target name="complete" description="--> Complete Build">
        <antcall target="svn-export-build-image-wc"></antcall>
        <antcall target="generate-core-transport"></antcall>
        <!-- <antcall target="generate-phpdocs"></antcall> -->
        <antcall target="prepare-build-image"></antcall>
        <antcall target="copy-core-transport"></antcall>
        
        <buildnumber />
        
        <!-- <antcall target="build-sdk"></antcall> -->
        <antcall target="build-traditional"></antcall>
        <antcall target="build-advanced"></antcall>
    </target>


    <!-- Various cleanup targets -->
    <target name="cleanup-build-image" description="empty the build image directory">
        <delete dir="${build.image.dir}" />
    </target>
    <target name="cleanup-build-distrib" description="empty the build distrib directory">
        <delete dir="${build.distrib.dir}" />
    </target>
    <target name="cleanup-build-apidocs" description="empty the build apidocs directory">
        <delete dir="${build.apidocs.dir}" />
    </target>

    <!-- Export the svn build image from the repository -->
    <target name="svn-export-build-image"
            depends="cleanup-build-image"
            description="export a revision of the MODx core from SVN"
    >
        <svn>
            <export srcUrl="${build.src.url}"
                    destPath="${build.image.dir}"
                    revision="HEAD"
                    force="true"
            />
        </svn>
    </target>

    <!-- Export the svn build image from a local working copy -->
    <target name="svn-export-build-image-wc"
            depends="cleanup-build-image"
            description="export a revision of the MODx core from an SVN working copy"
    >
        <svn>
            <export srcPath="${project.basedir}"
                    destPath="${build.image.dir}"
                    force="true"
            />
        </svn>
    </target>

    <!-- Run the core data generation script -->
    <target name="generate-core-data"
            description="generate core data for MODx from a reference database"
    >
        <exec dir="${basedir}" executable="${php.command}">
            <arg line="${basedir}/transport.data.php" />
        </exec>
    </target>

    <!-- Run the core package generation script -->
    <target name="generate-core-transport" description="generate the core transport package">
        <exec dir="${basedir}" executable="${php.command}">
            <arg line="${basedir}/transport.core.php" />
        </exec>
    </target>

    <!-- Run the phpdoc generation script -->
    <target name="generate-phpdocs"
            depends="cleanup-build-apidocs"
            description="generate the phpdoc documentation"
    >
        <exec dir="${project.basedir}" executable="${phpdoc.command}">
            <arg line="-c ${basedir}/phpdoc.ini" />
        </exec>
    </target>

    <!-- Copy the core transport package from a working copy to an exported image -->
    <target name="copy-core-transport" description="copy the core transport to the image">
        <delete file="${build.image.dir}/core/packages/core.transport.zip" />
        <delete dir="${build.image.dir}/core/packages/core" />
        <copy file="${project.core.dir}/packages/core.transport.zip"
              todir="${build.image.dir}/core/packages"
        />
    </target>

    <!-- Prepare the build image for making a distrib -->
    <target name="prepare-build-image" description="prepare the build image for packaging">
        <mkdir dir="${build.distrib.dir}" />
    </target>

    <!-- Build a MODx SDK distrib with all files in place and extracted -->
    <target name="build-sdk" description="create the traditional distribution package">
        <unzip src="${build.image.dir}/core/packages/core.transport.zip" dest="${build.image.dir}/core/packages/">
            <patternset>
                <include name="core/manifest.php" />
                <include name="core/*/*.php" />
            </patternset>
        </unzip>
        <zip destfile="${build.distrib.dir}/${project.name}-${modx.core.version}-${modx.core.release}-${build.number}-sdk.zip">
            <fileset dir="${build.image.dir}" />
        </zip>
    </target>

    <!-- Build a traditional MODx distrib with all files in place and extracted -->
    <target name="build-traditional" description="create the traditional distribution package">
        <unzip src="${build.image.dir}/core/packages/core.transport.zip" dest="${build.image.dir}/core/packages/">
            <patternset>
                <include name="core/manifest.php" />
                <include name="core/*/*.php" />
            </patternset>
        </unzip>
        <zip destfile="${build.distrib.dir}/${project.name}-${modx.core.version}-${modx.core.release}-${build.number}.zip">
            <fileset dir="${build.image.basedir}">
                <include name="${project.name}-${modx.core.version}-${modx.core.release}/**" />
                <exclude name="${project.name}-${modx.core.version}-${modx.core.release}/_build/**" />
            </fileset>
        </zip>
    </target>

    <!-- Build a new advanced MODx distrib with only the core/ and setup/ dirs 
        and the core transport package included -->
    <target name="build-advanced" description="create the advanced distribution package">
        <zip destfile="${build.distrib.dir}/${project.name}-${modx.core.version}-${modx.core.release}-${build.number}-advanced.zip">
            <fileset dir="${build.image.dir}">
                <include name="core/**" />
                <exclude name="core/packages/core/**" />
                <include name="setup/**" />
            </fileset>
        </zip>
    </target>

    <!-- Publish a distrib to a server -->
    <target name="publish-build" description="publish the build to a server for download">
        
    </target>
</project>